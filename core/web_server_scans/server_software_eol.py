import requests


class ServerSoftwareCheck:

    # Base URL for the end-of-life API
    BASE_API_URL = "https://endoflife.date/api/"

    def __init__(self):
        # Initialize a dictionary to store results about the server software
        self.result = {
            "software": None,
            "version": None,
            "full_version": None,
            "release_date": None,
            "latest_version": None,
            "latest_version_date": None,
            "status": "Not found",
            "error": None
        }

    def get_server_software(self, url):
        """
        Fetches the 'Server' header from the specified URL and updates the result 
        with the software name and version.
        """
        try:
            # Make a GET request to the specified URL
            response = requests.get(url)
            # Get the 'Server' header value
            server = response.headers.get('Server')

            # If a 'Server' header is found, extract software name and version
            if server:
                self.result["full_version"] = server
                software_parts = server.split('/')
                if len(software_parts) > 1:
                    self.result["software"], self.result["version"] = software_parts
            else:
                self.result["error"] = "Server header not found or hidden."

        # Handle any request exceptions and update the error in the result
        except requests.RequestException as e:
            self.result["error"] = str(e)

    def get_end_of_life(self):
        """
        Uses the end-of-life API to fetch details about the server software's lifecycle.
        Updates the result with release date, latest version, status, etc.
        """
        # Get software name from the result
        software = self.result["software"]
        if not software:
            return

        # Construct the API endpoint for the software
        url = f"{self.BASE_API_URL}{software}"
        response = requests.get(url)

        # If the API doesn't return a successful status, update the error
        if response.status_code != 200:
            self.result["error"] = f"API error: {response.status_code}"
            return

        # Process the API response and update the result with relevant details
        data = response.json()
        for entry in data:
            # Find the entry that matches the software's version
            if entry.get("cycle") == self.result["version"].rsplit('.', 1)[0]:
                self.result["release_date"] = entry.get("releaseDate")
                self.result["latest_version"] = entry.get("latest")
                self.result["latest_version_date"] = entry.get(
                    "latestReleaseDate")
                self.result["status"] = "End of Life" if entry["eol"] is not None else "Still supported"
                break

    def check(self, url):
        """
        Main method to initiate the check against the specified URL. 
        It fetches the server software details and then its end-of-life status.
        Returns the consolidated result.
        """
        self.get_server_software(url)
        if self.result["software"] and self.result["version"]:
            self.get_end_of_life()

        return self.result


# Testing purposes
checker = ServerSoftwareCheck()
print(checker.check("https://ba.be/"))
