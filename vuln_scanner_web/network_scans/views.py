from django.shortcuts import render
from django.http import HttpResponse
from .forms import URLInputForm
from .network_scans_package import host_discovery, pcap_analysis, remote_os_detection,port_scanner
import os

# Create your views here.

def index(request):
    return render(request, 'network_scans/index.html', {'current_page': 'network_scans'})

def network_scans_view(request):
    active_hosts = None
    traffic_data = None
    pcap_packages_count = None
    os_detection = None
    open_ports = None

    if request.method == 'POST':
        form = URLInputForm(request.POST, request.FILES)
        if form.is_valid():
            ip = form.cleaned_data['ip']
            pcap_filename = None
            if 'pcap_file' in request.FILES:
                pcap_file = request.FILES.get('pcap_file')
                pcap_filename = pcap_file.name
            selected_tool = form.cleaned_data['tool']

            # Determine which button was clicked
            if 'host_discovery' in request.POST:
                clean_ip = ip.replace("http://", "").replace("https://", "")
                active_hosts = host_discovery.discover_hosts(clean_ip)
            elif 'pcap_analysis' in request.POST and 'pcap_file' in request.FILES:
                pcap_file = request.FILES['pcap_file']
                pcap_filename = pcap_file.name

                # Save the file temporarily
                with open(pcap_filename, 'wb+') as destination:
                    for chunk in pcap_file.chunks():
                        destination.write(chunk)

                # Analyze the PCAP file
                traffic_data = pcap_analysis.analyze_pcap(pcap_filename)

                pcap_packages_count = {
                    "http_traffic": len(traffic_data['http_traffic']),
                    "ssh_traffic": len(traffic_data['ssh_traffic']),
                    "icmp_traffic": len(traffic_data['icmp_traffic']),
                    "smtp_traffic": len(traffic_data['smtp_traffic']),
                    "pop3_traffic": len(traffic_data['pop3_traffic']),
                    "imap_traffic": len(traffic_data['imap_traffic']),
                }
                # Remove the temporary file
                os.remove(pcap_filename)
            elif 'os_detection' in request.POST:
                clean_ip = ip.replace("http://", "").replace("https://", "")
                if selected_tool == 'nmap':
                    # Call your nmap os detection function here
                    os_detection = remote_os_detection.nmap_os_detection(clean_ip)
                elif selected_tool == 'scapy':
                    # Call your scapy os detection function here
                    os_detection = remote_os_detection.scapy_os_detection(clean_ip)
            elif 'port_scanner' in request.POST:
                clean_ip = ip.replace("http://", "").replace("https://", "")
                if selected_tool == 'nmap':
                    # Call your nmap os detection function here
                    open_ports = port_scanner.nmap_port_scan(clean_ip)
                elif selected_tool == 'scapy':
                    # Call your scapy os detection function here
                    open_ports = port_scanner.scapy_scan_ports(clean_ip)
                print(open_ports)

    else:
        form = URLInputForm()

    context = {
        'form': form,
        'active_hosts': active_hosts,
        'pcap_analysis': pcap_packages_count,
        'os_detection': os_detection,
        'open_ports': open_ports,
    }

    return render(request, 'network_scans/index.html', context)
